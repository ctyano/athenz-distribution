name: Build and Publish Docker Image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # If any commit message in your push or the HEAD commit of your PR contains the strings
  # [skip ci], [ci skip], [no ci], [skip actions], or [actions skip]
  # workflows triggered on the push or pull_request events will be skipped.
  # https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/
  workflow_call:
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'docs/**'

env:
  # Use docker.io for Docker Hub if empty
  DOCKER_REGISTRY_URL: ghcr.io
  # DOCKER_REGISTRY_OWNER: ${{ env.CI_REPOSITORY_OWNER }}
  # DOCKER_REGISTRY_IMAGE: ${{ env.CI_REPOSITORY_NAME }}
  # DOCKER_REGISTRY_TOKEN: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
  DOCKER_TAEGET_PLATFORMS: linux/amd64,linux/arm64
  #DOCKER_BUILD_ARGS: |
  TRACKING_GIT_REPO: AthenZ/athenz

jobs:
  build:

    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
    permissions:
      actions: none
      checks: none
      contents: read
      deployments: none
      issues: none
      discussions: none
      packages: write
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none

    steps:
      # A GitHub Action to expose useful environment variables.
      # https://github.com/FranzDiebold/github-env-vars-action
      -
        name: GitHub Environment Variables Action
        id: env
        # uses: https://github.com/FranzDiebold/github-env-vars-action/tags
        uses: FranzDiebold/github-env-vars-action@v2

      # A GitHub Action to prepare default environment variables.
      -
        name: Set Default Environment Variables
        id: default_env
        run: |
          # Use docker.io for Docker Hub if empty
          [[ "${{ env.DOCKER_REGISTRY_URL}}" = "" ]] && echo "DOCKER_REGISTRY_URL=docker.io" >> $GITHUB_ENV
          [[ "${{ env.DOCKER_REGISTRY_OWNER }}" = "" ]] && echo "DOCKER_REGISTRY_OWNER=${{ env.CI_REPOSITORY_OWNER }}" >> $GITHUB_ENV
          [[ "${{ env.DOCKER_REGISTRY_IMAGE }}" = "" ]] && echo "DOCKER_REGISTRY_IMAGE=${{ env.CI_REPOSITORY_NAME }}" >> $GITHUB_ENV
          [[ "${{ secrets.DOCKER_REGISTRY_TOKEN }}" = "" ]] && echo "DOCKER_REGISTRY_URL=ghcr.io" >> $GITHUB_ENV
          [[ "${{ secrets.DOCKER_REGISTRY_TOKEN }}" = "" ]] && echo "DOCKER_REGISTRY_OWNER=${{ env.CI_REPOSITORY_OWNER }}" >> $GITHUB_ENV
          [[ "${{ secrets.DOCKER_REGISTRY_TOKEN }}" = "" ]] && echo "DOCKER_REGISTRY_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV || echo "DOCKER_REGISTRY_TOKEN=${{ secrets.DOCKER_REGISTRY_TOKEN }}" >> $GITHUB_ENV

      # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      # https://github.com/actions/checkout
      -
        name: Checkout repository
        id: checkout
        # You may pin to the exact commit or the version.
        # uses: https://github.com/actions/checkout/tags
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # A GitHub Action to prepare default environment variables.
      -
        name: Set dynamic docker build arguments
        id: dynamic_docker_build_args
        run: |
          set -exuo pipefail

          if [[ ${{ github.event_name != 'pull_request' && github.event.inputs.target_version != '' && github.event.inputs.target_version != github.event.inputs.current_version }} = true ]]; then
            if [[ "${{ github.event.inputs.target_version }}" =~ .*([0-9]+.[0-9]+.[0-9]+).* ]]; then
              PACKAGE_VERSION="$(echo ${{ github.event.inputs.target_version }} | sed -e 's/.*\([0-9]+.[0-9]+.[0-9]+\).*/\1/g')"
              TAG_VERSION="$(echo v${{ github.event.inputs.target_version }} | sed -e 's/.*\([0-9]+.[0-9]+.[0-9]+\).*/\1/g'))"
            fi
          elif [[ "${{ env.CI_REF }}" == "refs/tags/"* ]] && [[ "$(basename ${{ env.CI_REF }})" =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+)(-[a-z]+)?(\.[0-9]+)?$ ]]; then
            PACKAGE_VERSION="$(git tag --points-at HEAD | sed -e 's/.*v\([0-9]*.[0-9]*.[0-9]*\).*/\1/g')"
            TAG_VERSION="$(git tag --points-at HEAD | sed -e 's/.*\(v[0-9]*.[0-9]*.[0-9]*\).*/\1/g')"
          else
            LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${TRACKING_GIT_REPO}/releases \
              | jq -r '.[].tag_name' \
              | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-z]+)?(\.[0-9]+)?$' \
              | sort -ruV \
              | head -n1)
            if [[ -n "$LATEST_TAG" ]]; then
              PACKAGE_VERSION=$(echo "$LATEST_TAG" | sed -E 's/^v?([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
              TAG_VERSION="v${PACKAGE_VERSION}"
            else
              echo "No valid version tag found in releases for ${TRACKING_GIT_REPO}" >&2
            fi
          fi

          # here we can place the command that will generate multi-line text
          echo "DOCKER_BUILD_ARGS<<EOF" >> $GITHUB_ENV
          printf "${{ env.DOCKER_BUILD_ARGS }}" >> $GITHUB_ENV
          printf "VERSION=${PACKAGE_VERSION}\n" >> $GITHUB_ENV
          printf "TAG_VERSION=${TAG_VERSION}\n" >> $GITHUB_ENV
          printf "VCS_REF=${TAG_VERSION}\n" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          printf "VERSION=${PACKAGE_VERSION}\n" >> $GITHUB_ENV

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      -
        name: Extract Docker metadata
        id: meta
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/metadata-action/tags
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_REGISTRY_IMAGE }}
          # for latest tag
          # latest=auto for tagging latest only for "master", "main" or "customized" branch
          flavor: |
            latest=true
          # eg. refs/heads/master
          # eg. refs/heads/customized
          # eg. refs/pull/318/merge
          # shorthand for {{major}}.{{minor}}.{{patch}} (can include pre-release)
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'customized') }}
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=schedule,pattern=nightly

      # GitHub Action to login against a Docker registry.
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      -
        name: Docker Login to registry ${{ env.DOCKER_REGISTRY_URL }}
        id: login
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/login-action/tags
        uses: docker/login-action@v3
        with:
          # Server address of Docker registry. If not set then will default to Docker Hub
          registry: ${{ env.DOCKER_REGISTRY_URL }} # optional
          # Username used to log against the Docker registry
          username: ${{ env.DOCKER_REGISTRY_OWNER }} # optional
          # Password or personal access token used to log against the Docker registry
          password: ${{ env.DOCKER_REGISTRY_TOKEN }} # optional
          # Log out from the Docker registry at the end of a job
          logout: true # optional, default is true

      # GitHub Action to install QEMU static binaries.
      # https://github.com/docker/setup-qemu-action
      -
        name: Set up QEMU
        id: qemu
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/setup-qemu-action/tags
        uses: docker/setup-qemu-action@v3

      # GitHub Action to set up Docker Buildx.
      # https://github.com/docker/setup-buildx-action
      -
        name: Set up Docker Buildx
        id: buildx
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/setup-buildx-action/tags
        uses: docker/setup-buildx-action@v3

      # This action sets up a go environment for use in actions by:
      # - Optionally downloading and caching a version of Go by version and adding to PATH.
      # - Registering problem matchers for error output.
      # https://github.com/actions/setup-go
      -
        name: Setup Golang
        id: setup-go
        # You may pin to the exact commit or the version.
        # uses: https://github.com/actions/setup-go/tags
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      # A GitHub Action to set environment variables for Go
      -
        name: Set Golang env
        id: go-env
        run: |
          go env | grep GOPATH | sed -e "s/'//g" >> $GITHUB_ENV

      # This action allows caching dependencies and build outputs to improve workflow execution time.
      # https://github.com/actions/cache
      -
        name: Cache Go Modules
        id: cache-go
        # uses: https://github.com/actions/cache/tags
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # A GitHub Action to check Athenz version
      -
        name: Compare if Athenz version is above 11
        id: compare-athenz-version-above-11
        run: |
          if [[ $(printf '%s\n' "1.12.0" "${{ env.VERSION }}" | sort -V | head -n1) = "1.12.0" ]]; then
            echo "ATHENZ_VERSION_ABOVE_11=true" >> $GITHUB_ENV
          fi

      # This action provides the following functionality for GitHub Actions runners:
      # - Downloading and setting up a requested version of Java. See [Usage](#usage) for a list of supported distributions.
      # - Extracting and caching custom version of Java from a local file.
      # - Configuring runner for publishing using Apache Maven.
      # - Configuring runner for publishing using Gradle.
      # - Configuring runner for using GPG private key.
      # - Registering problem matchers for error output.
      # - Caching dependencies managed by Apache Maven.
      # - Caching dependencies managed by Gradle.
      # - Caching dependencies managed by sbt.
      # - [Maven Toolchains declaration](https://maven.apache.org/guides/mini/guide-using-toolchains.html) for specified JDK versions.
      # 
      # This action allows you to work with Java and Scala projects.
      # https://github.com/actions/setup-java
      -
        name: Setup Java 11
        id: setup-java-11
        if: env.ATHENZ_VERSION_ABOVE_11 != 'true'
        # uses: https://github.com/actions/setup-java/tags
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'
          #cache: maven
      -
        name: Setup Java 17
        id: setup-java-17
        if: env.ATHENZ_VERSION_ABOVE_11 == 'true'
        # uses: https://github.com/actions/setup-java/tags
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          #cache: maven

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      -
        name: Build and push Docker image for ${{ env.DOCKER_TAEGET_PLATFORMS }}
        id: build_and_push
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/build-push-action/tags
        run: |
          if ${{ github.event_name != 'pull_request' }}; then \
            DOCKER_REGISTRY="${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_REGISTRY_OWNER }}/" \
            PUSH=${{ github.event_name != 'pull_request' }} \
            make buildx; \
          else \
            DOCKER_REGISTRY="${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_REGISTRY_OWNER }}/" \
            make build; \
          fi
        #uses: docker/build-push-action@v4
        #with:
        #  context: .
        #  push: ${{ github.event_name != 'pull_request' }}
        #  tags: ${{ steps.meta.outputs.tags }}
        #  labels: ${{ steps.meta.outputs.labels }}
        #  platforms: ${{ env.DOCKER_TAEGET_PLATFORMS }}
        #  build-args: ${{ env.DOCKER_BUILD_ARGS }}
        #  cache-from: ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_REGISTRY_IMAGE }}

