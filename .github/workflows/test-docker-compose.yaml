name: Test running on Docker Compose

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # If any commit message in your push or the HEAD commit of your PR contains the strings
  # [skip ci], [ci skip], [no ci], [skip actions], or [actions skip]
  # workflows triggered on the push or pull_request events will be skipped.
  # https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/
  workflow_call:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'docs/**'

env:
  # Use docker.io for Docker Hub if empty
  DOCKER_REGISTRY_URL: ghcr.io
  # DOCKER_REGISTRY_OWNER: ${{ env.CI_REPOSITORY_OWNER }}
  # DOCKER_REGISTRY_IMAGE: ${{ env.CI_REPOSITORY_NAME }}
  # DOCKER_REGISTRY_TOKEN: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
  # DOCKER_TAEGET_PLATFORMS: linux/amd64,linux/arm64
  # DOCKER_BUILD_ARGS: |
  GITHUB_REPOSITORY: AthenZ/athenz

jobs:
  build:

    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
    permissions:
      actions: none
      checks: none
      contents: read
      deployments: none
      issues: none
      discussions: none
      packages: read
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none

    steps:
      # A GitHub Action to expose useful environment variables.
      # https://github.com/FranzDiebold/github-env-vars-action
      -
        name: GitHub Environment Variables Action
        id: env
        # uses: https://github.com/FranzDiebold/github-env-vars-action/tags
        uses: FranzDiebold/github-env-vars-action@v2

      # A GitHub Action to prepare default environment variables.
      -
        name: Set Default Environment Variables
        id: default_env
        run: |
          # Use docker.io for Docker Hub if empty
          [[ "${{ env.DOCKER_REGISTRY_URL}}" = "" ]] && echo "DOCKER_REGISTRY_URL=docker.io" >> $GITHUB_ENV
          [[ "${{ env.DOCKER_REGISTRY_OWNER }}" = "" ]] && echo "DOCKER_REGISTRY_OWNER=${{ env.CI_REPOSITORY_OWNER }}" >> $GITHUB_ENV
          [[ "${{ env.DOCKER_REGISTRY_IMAGE }}" = "" ]] && echo "DOCKER_REGISTRY_IMAGE=${{ env.CI_REPOSITORY_NAME }}" >> $GITHUB_ENV
          [[ "${{ secrets.DOCKER_REGISTRY_TOKEN }}" = "" ]] && echo "DOCKER_REGISTRY_URL=ghcr.io" >> $GITHUB_ENV
          [[ "${{ secrets.DOCKER_REGISTRY_TOKEN }}" = "" ]] && echo "DOCKER_REGISTRY_OWNER=${{ env.CI_REPOSITORY_OWNER }}" >> $GITHUB_ENV
          [[ "${{ secrets.DOCKER_REGISTRY_TOKEN }}" = "" ]] && echo "DOCKER_REGISTRY_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV || echo "DOCKER_REGISTRY_TOKEN=${{ secrets.DOCKER_REGISTRY_TOKEN }}" >> $GITHUB_ENV

      # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      # https://github.com/actions/checkout
      -
        name: Checkout repository
        id: checkout
        # You may pin to the exact commit or the version.
        # uses: https://github.com/actions/checkout/tags
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # GitHub Action to login against a Docker registry.
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      -
        name: Docker Login to registry ${{ env.DOCKER_REGISTRY_URL }}
        id: login
        # You may pin to the exact commit or the version.
        # uses: https://github.com/docker/login-action/tags
        uses: docker/login-action@v3
        with:
          # Server address of Docker registry. If not set then will default to Docker Hub
          registry: ${{ env.DOCKER_REGISTRY_URL }} # optional
          # Username used to log against the Docker registry
          username: ${{ env.DOCKER_REGISTRY_OWNER }} # optional
          # Password or personal access token used to log against the Docker registry
          password: ${{ env.DOCKER_REGISTRY_TOKEN }} # optional
          # Log out from the Docker registry at the end of a job
          logout: true # optional, default is true

      # This action sets up a go environment for use in actions by:
      # - Optionally downloading and caching a version of Go by version and adding to PATH.
      # - Registering problem matchers for error output.
      # https://github.com/actions/setup-go
      -
        name: Setup Golang
        id: setup-go
        # You may pin to the exact commit or the version.
        # uses: https://github.com/actions/setup-go/tags
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      # A GitHub Action to set environment variables for Go
      -
        name: Set Golang env
        id: go-env
        run: |
          go env | grep GOPATH | sed -e "s/'//g" >> $GITHUB_ENV

      # A GitHub Action to setup Docker Compose
      -
        name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get -y install docker-compose

      # A GitHub Action to check Athenz version
      -
        name: Compare if Athenz version is above 11
        id: compare-athenz-version-above-11
        run: |
          # Get latest release tag with:
          #   curl -s https://api.github.com/repos/ctyano/athenz-distribution/releases \
          #     | jq -r .[].tag_name \
          #     | grep -E ".*(v[0-9]*.[0-9]*.[0-9]*).*" \
          #     | sed -e 's/.*\(v[0-9]*.[0-9]*.[0-9]*\).*/\1/g' \
          #     | head -n1
          CURRENT_VERSION="$( \
            curl -s https://api.github.com/repos/${{ env.CI_REPOSITORY_OWNER }}/${{ env.CI_REPOSITORY_NAME }}/releases \
              | jq -r .[].tag_name \
              | grep -E ".*(v[0-9]*.[0-9]*.[0-9]*).*" \
              | sed -e 's/.*v\([0-9]*.[0-9]*.[0-9]*\).*/\1/g' \
              | sort -ruV \
              | head -n1 \
          )"
          echo "VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
          if [[ $(printf '%s\n' "1.12.0" "${CURRENT_VERSION}" | sort -V | head -n1) = "1.12.0" ]]; then
            echo "ATHENZ_VERSION_ABOVE_11=true" >> $GITHUB_ENV
          fi

      # This action provides the following functionality for GitHub Actions runners:
      # - Downloading and setting up a requested version of Java. See [Usage](#usage) for a list of supported distributions.
      # - Extracting and caching custom version of Java from a local file.
      # - Configuring runner for publishing using Apache Maven.
      # - Configuring runner for publishing using Gradle.
      # - Configuring runner for using GPG private key.
      # - Registering problem matchers for error output.
      # - Caching dependencies managed by Apache Maven.
      # - Caching dependencies managed by Gradle.
      # - Caching dependencies managed by sbt.
      # - [Maven Toolchains declaration](https://maven.apache.org/guides/mini/guide-using-toolchains.html) for specified JDK versions.
      # 
      # This action allows you to work with Java and Scala projects.
      # https://github.com/actions/setup-java
      -
        name: Setup Java 11
        id: setup-java-11
        if: env.ATHENZ_VERSION_ABOVE_11 != 'true'
        # uses: https://github.com/actions/setup-java/tags
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'
          #cache: maven
      -
        name: Setup Java 17
        id: setup-java-17
        if: env.ATHENZ_VERSION_ABOVE_11 == 'true'
        # uses: https://github.com/actions/setup-java/tags
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          #cache: maven

      # A GitHub Action to deploy application with Docker Compose
      -
        name: Deploy Application
        run: |
          set -ex
          VERSION=${VERSION} make build-deploy-docker-athenz

      # A GitHub Action to check and test application
      -
        name: Run Tests
        run: |
          # Run tests against your deployed application in KinD
          # Replace this with your test command
          make check-docker-athenz test-docker-athenz

