# athenz-authzwebhook
---
admin:
  access_log:
    - name: access_log_file
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
        path: "/dev/stdout"
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9901
node:
  id: envoy-0
  cluster: envoy-cluster
static_resources:
  listeners:
    - name: localhost_listener
      address:
        socket_address:
          protocol: TCP
          address: ::FFFF:127.0.0.1
          ipv4_compat: true
          port_value: 8080
      filter_chains: &localhost_filter_chains
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: localhost_proxy_prefix
                access_log: &access_log
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                route_config: &localhost_route_config
                  name: localhost_proxy_route
                  virtual_hosts:
                    - name: localhost_proxy_hosts
                      domains:
                        # Only a single wildcard domain is permitted in route https_proxy_route
                        - "*"
                      request_headers_to_remove:
                        - x-athenz-domain
                        - x-athenz-role
                      routes: &localhost_routes
                        - match:
                            path_separated_prefix: "/status"
                          direct_response:
                            status: 200
                            body:
                              inline_string: "This is server ingress proxy with JWT/Lua filter."
                          response_headers_to_add:
                            - header:
                                key: x-athenz-method
                                value: "%REQ(:METHOD)%"
                            - header:
                                key: x-athenz-path
                                value: "%REQ(:PATH)%"
                          typed_per_filter_config: &filters_disabled
                            envoy.filters.http.lua.authorization.init: &lua_authz_init_disabled
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              disabled: true
                            envoy.filters.http.lua.rolecert.authentication: &lua_authn_rolecert_disabled
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              disabled: true
                            envoy.filters.http.lua.authorization: &lua_authz_authorization_disabled
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              disabled: true
                        - match:
                            path_separated_prefix: "/zms/v1"
                          route:
                            cluster: zms
                            auto_host_rewrite: true
                          typed_per_filter_config: *filters_disabled
                        - match:
                            path_separated_prefix: "/zts/v1"
                          route:
                            cluster: zts
                            auto_host_rewrite: true
                          typed_per_filter_config: *filters_disabled
                        - match:
                            path_separated_prefix: "/mtlsauthn"
                          route:
                            cluster: echoserver
                            prefix_rewrite: "/echoserver"
                            auto_host_rewrite: true
                          request_headers_to_add: &request_headers_to_add
                            - header:
                                key: x-athenz-sni
                                value: "%REQUESTED_SERVER_NAME%"
                            - header:
                                key: x-athenz-certificate-subject
                                value: "%DOWNSTREAM_PEER_SUBJECT%"
                            - header:
                                key: x-athenz-certificate-issuer
                                value: "%DOWNSTREAM_PEER_ISSUER%"
                            - header:
                                key: x-athenz-certificate-san-uri
                                value: "%DOWNSTREAM_PEER_URI_SAN%"
                            - header:
                                key: x-athenz-certificate-v-start
                                value: "%DOWNSTREAM_PEER_CERT_V_START%"
                            - header:
                                key: x-athenz-certificate-v-end
                                value: "%DOWNSTREAM_PEER_CERT_V_END%"
                            - header:
                                key: x-athenz-certificate
                                value: "%DOWNSTREAM_PEER_CERT%"
                            - header:
                                key: x-athenz-proxy
                                value: "ingress envoy with jwt/lua filter"
                        - match:
                            prefix: "/jwtauthn"
                          route:
                            cluster: httpecho
                            prefix_rewrite: "/echoserver"
                            auto_host_rewrite: true
                          request_headers_to_add: *request_headers_to_add
                          typed_per_filter_config:
                            envoy.filters.http.jwt_authentication.accesstoken.authentication:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.PerRouteConfig
                              requirement_name: accesstoken
                        - match:
                            prefix: "/echoserver"
                          route:
                            cluster: echoserver
                          request_headers_to_add: *request_headers_to_add
                          typed_per_filter_config: *filters_disabled
                        - match:
                            prefix: "/"
                          route:
                            cluster: envoy_admin
                          typed_per_filter_config: *filters_disabled
                http_filters: &localhost_http_filters
                  # Authentication with Role Certificate
                  - name: envoy.filters.http.lua.rolecert.authentication
                    typed_config:
                      # https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/lua_filter
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        inline_string: |
                          function envoy_on_request(request_handle)
                            if request_handle:connection():ssl() ~= nil then
                              -- extract x-athenz-principal from sans uri
                              for _, uri in pairs(request_handle:connection():ssl():uriSanPeerCertificate()) do
                                if string.sub(uri, 1, string.len("athenz://principal/")) == "athenz://principal/" then
                                  request_handle:headers():add("x-athenz-principal", string.gsub(uri, "athenz://principal/(%w+)", "%1"))
                                end
                              end
                              -- extract x-athenz-domain and x-athenz-role from subject cn
                              local subject = request_handle:connection():ssl():subjectPeerCertificate()
                              if string.match(subject, ".*CN=(%w+):role.(%w+),.*") ~= nil then
                                local domain = string.gsub(subject, ".*CN=(%w+):role.(%w+),.*", "%1")
                                request_handle:headers():add("x-athenz-domain", domain)
                                request_handle:logInfo(string.format('%s was set to x-athenz-domain from role cert', domain))
                                local role = string.gsub(subject, ".*CN=(%w+):role.(%w+),.*", "%2")
                                request_handle:headers():add("x-athenz-role", role)
                                request_handle:logInfo(string.format('%s was set to x-athenz-role from role cert', role))
                              end
                              -- extract x-athenz-issued-at from valid from
                              request_handle:headers():add("x-athenz-issued-at", string.format('%d', request_handle:connection():ssl():validFromPeerCertificate()))
                              -- extract x-athenz-expires-at from valid after
                              request_handle:headers():add("x-athenz-expires-at", string.format('%d', request_handle:connection():ssl():expirationPeerCertificate()))
                            else
                              request_handle:logInfo("ssl was nil in envoy lua.")
                            end
                          end
                  # Authentication with Access Token
                  - name: envoy.filters.http.jwt_authentication.accesstoken.authentication
                    typed_config:
                      # https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/jwt_authn_filter
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        athenz_zts_accesstoken:
                          remote_jwks:
                            http_uri:
                              cluster: zts
                              timeout: 5s
                              uri: "https://athenz-zts-server.athenz:4443/zts/v1/oauth2/keys?rfc=true"
                          # Accept JWT for only certain athenz domains
                          #audiences:
                          #  - athenz
                          from_headers:
                            - name: "Authorization"
                              value_prefix: "Bearer "
                            - name: "authorization"
                              value_prefix: "bearer "
                          forward: true
                          claim_to_headers:
                            - header_name: x-athenz-principal
                              claim_name: sub
                            - header_name: x-athenz-domain
                              claim_name: aud
                            - header_name: x-athenz-role
                              claim_name: scope
                            - header_name: x-athenz-issued-at
                              claim_name: iat
                            - header_name: x-athenz-expires-at
                              claim_name: exp
                            - header_name: x-athenz-jwt-sub
                              claim_name: sub
                            - header_name: x-athenz-jwt-aud
                              claim_name: aud
                            - header_name: x-athenz-jwt-scope
                              claim_name: scope
                            - header_name: x-athenz-jwt-iss
                              claim_name: iss
                            - header_name: x-athenz-jwt-iat
                              claim_name: iat
                            - header_name: x-athenz-jwt-exp
                              claim_name: exp
                          jwt_cache_config:
                            jwt_cache_size: 100 # The unit is number of JWT tokens, default to 100.
                      requirement_map:
                        accesstoken:
                          provider_name: athenz_zts_accesstoken
                  # Authorization with Principal
                  - name: envoy.filters.http.lua.authorization
                    typed_config:
                      # https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/lua_filter
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        inline_string: |
                          function envoy_on_request(request_handle)

                            -- we are going to extract principal, method, path and domain from the headers
                            local principal = request_handle:headers():get("x-athenz-principal")
                            local domain = request_handle:headers():get("x-athenz-domain")
                            local method = request_handle:headers():get(":method")
                            local path = request_handle:headers():get(":path")
                            request_handle:logInfo(string.format('x-athenz-principal %s, x-athenz-domain %s, :method %s, :path %s', principal, domain, method, path))

                            -- we are going to check if the access is granted or not by assuming :method to be action and :path to be path
                            local authzpath = string.format("/zts/v1/access/%s?resource=%s:%s&principal=%s", method, domain, path, principal)
                            request_handle:logInfo(string.format('authzpath %s', authzpath))
                            local headers = {
                              [":method"] = "GET",
                              [":path"] = authzpath,
                              [":authority"] = "envoy_localhost",
                            }
                            local headers, body = request_handle:httpCall("envoy_localhost", headers, "", 500, false)
                            local granted = string.match(body, '{"granted":(%w+)}')
                            if (headers[":status"] == "200" and granted == "true") then
                              goto authorized
                            end
                            request_handle:logWarn(string.format("granted:%s, x-athenz-principal:%s, x-athenz-domain:%s, method:%s, path:%s", granted, principal, domain, method, path))
                            request_handle:respond(
                              {[":status"] = "401", ["x-ahenz-domain"] = domain, ["x-ahenz-role"] = role},
                            "")

                            ::authorized::
                            -- if authorized, then we will set x-athenz-proxy header
                            request_handle:headers():add("x-athenz-proxy", "lua authz complete")
                          end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
    - name: mtls_listener
      address:
        socket_address:
          protocol: TCP
          address: ::FFFF:0.0.0.0
          ipv4_compat: true
          port_value: 4443
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: mtls_proxy_prefix
                access_log: *access_log
                route_config: *localhost_route_config
                http_filters: *localhost_http_filters
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context: &common_tls_context
                tls_certificate_sds_secret_configs: &tls_certificate_sds_secret_configs_identity
                  - name: identity_sds
                    sds_config:
                      path_config_source:
                        path: /etc/envoy/identity_sds.yaml
                      resource_api_version: V3
                validation_context_sds_secret_config: &validation_context_sds_secret_config_ca
                  name: ca_sds
                  sds_config:
                    path_config_source:
                      path: /etc/envoy/ca_sds.yaml
                    resource_api_version: V3
              require_client_certificate: true
    - name: https_listener
      address:
        socket_address:
          protocol: TCP
          address: ::FFFF:0.0.0.0
          ipv4_compat: true
          port_value: 443
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: https_proxy_prefix
                access_log: *access_log
                route_config: *localhost_route_config
                http_filters: *localhost_http_filters
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificate_sds_secret_configs: *tls_certificate_sds_secret_configs_identity
  clusters:
    - name: envoy_admin
      connect_timeout: 0.25s
      type: STATIC # LOGICAL_DNS or STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: envoy_admin
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 9901
    - name: envoy_localhost
      connect_timeout: 0.25s
      type: STATIC # LOGICAL_DNS or STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: envoy_localhost
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8080
    - name: zms
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: zms
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: athenz-zms-server.athenz
                      port_value: 4443
      transport_socket: &transport_socket
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context: *common_tls_context
    - name: zts
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: zts
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: athenz-zts-server.athenz
                      port_value: 4443
      transport_socket: *transport_socket
    - name: echoserver
      connect_timeout: 0.25s
      type: STATIC # LOGICAL_DNS or STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: echoserver
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 3000
    - name: httpecho
      connect_timeout: 0.25s
      type: STATIC # LOGICAL_DNS or STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: httpecho
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 5678
